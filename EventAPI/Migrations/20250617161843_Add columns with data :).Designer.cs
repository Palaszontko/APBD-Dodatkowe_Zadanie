// <auto-generated />
using System;
using EventAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250617161843_Add columns with data :)")]
    partial class Addcolumnswithdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MaxPeople")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Sztuczna inteligencja w praktyce",
                            MaxPeople = 7,
                            Title = "AI Konferencja"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Chmura i bezpieczeństwo",
                            MaxPeople = 80,
                            Title = "Chmura"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Automatyzacja i CI/CD",
                            MaxPeople = 60,
                            Title = "DevOps"
                        });
                });

            modelBuilder.Entity("EventAPI.Models.EventParticipant", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int")
                        .HasColumnName("Participant_Id");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EventId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EventParticipant");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            ParticipantId = 1,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 1,
                            ParticipantId = 2,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 1,
                            ParticipantId = 3,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 1,
                            ParticipantId = 4,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 1,
                            ParticipantId = 5,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 2,
                            ParticipantId = 6,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 2,
                            ParticipantId = 7,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 2,
                            ParticipantId = 8,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 2,
                            ParticipantId = 9,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 2,
                            ParticipantId = 10,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 3,
                            ParticipantId = 11,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 3,
                            ParticipantId = 12,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 3,
                            ParticipantId = 13,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 3,
                            ParticipantId = 14,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        },
                        new
                        {
                            EventId = 3,
                            ParticipantId = 15,
                            RegisterDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Registered"
                        });
                });

            modelBuilder.Entity("EventAPI.Models.EventSpeaker", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int")
                        .HasColumnName("Speaker_Id");

                    b.HasKey("EventId", "SpeakerId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("EventSpeaker");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            SpeakerId = 1
                        },
                        new
                        {
                            EventId = 1,
                            SpeakerId = 2
                        },
                        new
                        {
                            EventId = 2,
                            SpeakerId = 3
                        },
                        new
                        {
                            EventId = 2,
                            SpeakerId = 4
                        },
                        new
                        {
                            EventId = 3,
                            SpeakerId = 5
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "adam1@mail.com",
                            FirstName = "Adam",
                            LastName = "Kowal"
                        },
                        new
                        {
                            Id = 2,
                            Email = "beata2@mail.com",
                            FirstName = "Beata",
                            LastName = "Nowak"
                        },
                        new
                        {
                            Id = 3,
                            Email = "cezary3@mail.com",
                            FirstName = "Cezary",
                            LastName = "Lis"
                        },
                        new
                        {
                            Id = 4,
                            Email = "dorota4@mail.com",
                            FirstName = "Dorota",
                            LastName = "Mazur"
                        },
                        new
                        {
                            Id = 5,
                            Email = "edward5@mail.com",
                            FirstName = "Edward",
                            LastName = "Wójcik"
                        },
                        new
                        {
                            Id = 6,
                            Email = "filip6@mail.com",
                            FirstName = "Filip",
                            LastName = "Kaczmarek"
                        },
                        new
                        {
                            Id = 7,
                            Email = "grazyna7@mail.com",
                            FirstName = "Grażyna",
                            LastName = "Baran"
                        },
                        new
                        {
                            Id = 8,
                            Email = "henryk8@mail.com",
                            FirstName = "Henryk",
                            LastName = "Sikora"
                        },
                        new
                        {
                            Id = 9,
                            Email = "iwona9@mail.com",
                            FirstName = "Iwona",
                            LastName = "Król"
                        },
                        new
                        {
                            Id = 10,
                            Email = "jacek10@mail.com",
                            FirstName = "Jacek",
                            LastName = "Wieczorek"
                        },
                        new
                        {
                            Id = 11,
                            Email = "katarzyna11@mail.com",
                            FirstName = "Katarzyna",
                            LastName = "Jankowska"
                        },
                        new
                        {
                            Id = 12,
                            Email = "leszek12@mail.com",
                            FirstName = "Leszek",
                            LastName = "Zając"
                        },
                        new
                        {
                            Id = 13,
                            Email = "monika13@mail.com",
                            FirstName = "Monika",
                            LastName = "Pawlak"
                        },
                        new
                        {
                            Id = 14,
                            Email = "norbert14@mail.com",
                            FirstName = "Norbert",
                            LastName = "Michalski"
                        },
                        new
                        {
                            Id = 15,
                            Email = "olga15@mail.com",
                            FirstName = "Olga",
                            LastName = "Kubiak"
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Speakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Anna",
                            LastName = "Kowalska"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Jan",
                            LastName = "Nowak"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Maria",
                            LastName = "Wiśniewska"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Piotr",
                            LastName = "Zieliński"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Ewa",
                            LastName = "Dąbrowska"
                        });
                });

            modelBuilder.Entity("EventAPI.Models.EventParticipant", b =>
                {
                    b.HasOne("EventAPI.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventAPI.Models.Participant", "Participant")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("EventAPI.Models.EventSpeaker", b =>
                {
                    b.HasOne("EventAPI.Models.Event", "Event")
                        .WithMany("EventSpeakers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventAPI.Models.Speaker", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("EventAPI.Models.Event", b =>
                {
                    b.Navigation("EventSpeakers");
                });

            modelBuilder.Entity("EventAPI.Models.Participant", b =>
                {
                    b.Navigation("EventParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
